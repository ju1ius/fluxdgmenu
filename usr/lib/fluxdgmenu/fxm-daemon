#! /bin/bash

set -u

################################################################################
#		VARIABLES
#-------------------------------------------------------------------------------
APP_PATH=$(readlink -f $0)
APP_DIR=$(dirname $APP_PATH)
APP_DAEMON=$(basename $APP_PATH)
APP_WATCH="fxm-watch"

# Needed if script was called with sudo
USER=$(whoami | sed 's/ .*//')
HOME="/home/$USER"

FLUXBOX_WDIR="$HOME/.fluxbox"
if [[ ! -d $FLUXBOX_WDIR ]]
then
  mkdir -p $FLUXBOX_WDIR
fi
ROOTMENU="$FLUXBOX_WDIR/menu"
GENERATE_ROOTMENU_CMD="$APP_DIR/fxm-rootmenu.py"

WDIR="$FLUXBOX_WDIR/fluxdgmenu"
if [[ ! -d $WDIR ]]
then
  mkdir -p $WDIR
fi

BUILD_CMD="$APP_DIR/fxm-applications.py"
MENU_CACHE="$WDIR/applications"
ICONS_CACHE="$WDIR/icons.db"

WITH_BOOKMARKS="false"
BOOKMARKS_CMD="$APP_DIR/fxm-bookmarks.py"
BOOKMARKS_CACHE="$WDIR/bookmarks"

PKG_NAME='fluxdgmenu'
TRIGGERS_DB="/var/lib/dpkg/triggers/File"

MONITORED=(
  # .directory files
  "/usr/share/desktop-directories"
  "/usr/local/share/desktop-directories"
  "/home/*/.local/share/desktop-directories"
  # .desktop files
  "/usr/share/applications"
  "/usr/local/share/applications"
  "/home/*/.local/share/applications"
  # LXDE Stuff
  "/etc/xdg/menus/lxde-applications-merged"
  "/home/*/.config/menus/lxde-applications-merged"
)
EXCLUDED=(
  "/.local/share/applications/menu-xdg/"
)

#-------------------------------------------------------------------------------
#		/VARIABLES
################################################################################



################################################################################
#		FUNCTIONS
#-------------------------------------------------------------------------------
check_triggers()
{
  if grep $PKG_NAME $TRIGGERS_DB > /dev/null
  then
    cat << _ERROR
  Uh oh...
  It seems you have dpkg-triggers running for $PKG_NAME
  You must disable them before starting the daemon.
  Run:
  $ $APP_DAEMON disable-triggers
  Or:
  $ $APP_DAEMON help
  if you want to know more about dpkg-triggers
_ERROR
    exit 1
  fi
}
#################################################
# Public API
#------------------------------------------------
start()
{
  check_triggers
  stop
  update
  # Get watched directories for the current user
  WATCHED=$(for d in "${MONITORED[@]}"
  do
    tmp=$(echo "$d" | sed "s/*/$USER/" )
    if [[ -d $tmp ]]
    then
      echo "$tmp";
    fi
  done)
  #
  EXCLUDES=$(for pattern in "${EXCLUDED[@]}"
  do
    echo "--exclude $pattern"
  done)
  #
  if [[ "$WITH_BOOKMARKS" == "true" ]]
  then
    $APP_WATCH -d \
      -a "$APP_DAEMON update" \
      -b "$APP_DAEMON update-bookmarks" \
      $EXCLUDES \
      $WATCHED
  else
    $APP_WATCH -d \
      -a "$APP_DAEMON update" \
      $EXCLUDES \
      $WATCHED
  fi
}

stop()
{
  pkill -u "$USER" $APP_WATCH
}

update()
{
  $BUILD_CMD > $MENU_CACHE
}

update_icons()
{
  rm -f $ICONS_CACHE
  update
  update_bookmarks
}

update_bookmarks()
{
  $BOOKMARKS_CMD > $BOOKMARKS_CACHE 
}

generate_rootmenu()
{
  update_icons
  mv "$ROOTMENU" "$ROOTMENU.bak"
  $GENERATE_ROOTMENU_CMD > $ROOTMENU
}

disable_triggers()
{
  if [[ -e $TRIGGERS_DB ]]
  then
    sudo sed -i -e "/$PKG_NAME$/d" $TRIGGERS_DB
  else
    echo "Your system doesn't support dpkg-triggers. Please use the daemon instead."
    exit 1
  fi
}

enable_triggers()
{
  if [[ -e $TRIGGERS_DB ]]
  then
    stop
    disable_triggers
    for d in "${MONITORED[@]}"
    do
      echo "$d $PKG_NAME" | sudo tee -a $TRIGGERS_DB
    done
  else
    echo "Your system doesn't support dpkg-triggers. Please use the daemon instead."
    exit 1
  fi
}

synopsis()
{
cat << _USAGE

$APP_DAEMON - monitors installed applications to generate a Fluxbox Applications Menu

Synopsis
========

Options:
--------
-b, --with-bookmarks          - If present and used in conjunction with the start command,
                                $APP_DAEMON will also monitor GTK Bookmarks.               

Commands:
---------
$APP_DAEMON help              - Prints the help message and exits
$APP_DAEMON start             - Starts the menu daemon
$APP_DAEMON stop              - Stops the menu daemon
$APP_DAEMON update            - Regenerates the applications menu
$APP_DAEMON update-bookmarks  - Regenerates the bookmarks menu
$APP_DAEMON update-icons      - Regenerates the icon cache,
                                then updates the applications and bookmarks menus
$APP_DAEMON generate-rootmenu - Generates a rootmenu
$APP_DAEMON enable-triggers   - Add dpkg-triggers (see $APP_DAEMON help for more infos)
$APP_DAEMON disable-triggers  - Remove dpkg-triggers (see $APP_DAEMON help for more infos)

_USAGE
}

usage ()
{
  synopsis
cat << _USAGE
About dpkg-triggers:
--------------------
  dpkg-triggers are a Debian/Apt specific way to trigger actions
  when a new package is installed/removed.
  They allow FluXDGMenu to update the menu without the overhead
  of running a daemon.

  However, they only work with packages installed by apt or dpkg.
  This is why they are not enabled by default.

  If you wish to activate this feature, first stop the daemon:
  $ $APP_DAEMON stop
  Then execute:
  $ $APP_DAEMON enable-triggers

  From now on, if you install a program in a non-standard way,
  like compiling from source, or a wine application,
  you'll need to explicitly update the menu by executing:
  $ $APP_DAEMON update

  You can deactivate this feature later by executing:
  $ $APP_DAEMON disable-triggers

  NOTE: For this feature to work you must install fluxdgmenu
        via the debian package.
_USAGE

}
#-------------------------------------------------------------------------------
#		/FUNCTIONS
################################################################################




################################################################################
#		MAIN
#-------------------------------------------------------------------------------
#
# OPTIONS
#
OPTS=$(getopt -o b -l with-bookmarks -- "$@")
eval set -- "$OPTS"

while true
do
  case "$1" in
    -b|--with-bookmarks)
      if [[ -f $HOME/.gtk-bookmarks ]]
      then
        WITH_BOOKMARKS="true"
      fi
      shift 1
    ;;
		--)
      shift
      break
    ;;
		*)
      echo "Internal error!"
      exit 1
    ;;
  esac
done

#
# COMMANDS
#
for arg
do
  case "$arg" in
    start|restart)
      start
    ;;
    stop)
      stop
    ;;
    generate-rootmenu)
      generate_rootmenu
    ;;
    update)
      update
    ;;
    update-icons)
      update_icons
    ;;
    update-bookmarks)
      update_bookmarks
    ;;
    disable-triggers)
      disable_triggers
    ;;
    enable-triggers)
      enable_triggers
    ;;
    help)
      usage
    ;;
    *)
      synopsis
    ;;
  esac
done
#-------------------------------------------------------------------------------
#		/MAIN
################################################################################
